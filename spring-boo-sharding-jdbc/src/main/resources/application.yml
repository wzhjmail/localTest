spring:
  shardingsphere:
    datasource:
      names: ds0,ds1
      ds0:
        type: org.apache.commons.dbcp2.BasicDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/ds0
        username: root
        password: root

      ds1:
        type: org.apache.commons.dbcp2.BasicDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/ds1
        username: root
        password: root

    shardingsphere:
      props:
        sql:
          show: true #大坑sql输出日志
      datasource:
        names: m1
      sharding:
        tables:
          t_order:
            actual-data-nodes: m1.t_order_$->{1..2} #指定t_order表的数据分布情况，配置数据结点m1.t_order_1,m1.t_order_2
            key-generator: #指定t_order表的主键生成策略为SNOWFLAKE
              column: order_id
              type: SNOWFLAKE
            table-strategy:
              line: #指定t_order表的分片策略，分片策略博阿凯分片键和分片算法
                sharding-column: order_id
                algorithm-expression: t_order_$->{order_id % 2 + 1}
    rules:
      sharding:
        tables:
          t_order:
            actual-data-nodes: ds$->{0..1}.t_order$->{0..1}
            database-strategy:
              standard:
                sharding-column: user_id
                sharding-algorithm-name: database_inline
            table-strategy:
              standard:
                sharding-column: order_id
                sharding-algorithm-name: table_inline
        sharding-algorithms:
          database_inline:
            type: INLINE
            props:
              algorithm-expression: ds_${user_id % 2}
          table_inline:
            type: INLINE
            props.algorithm-expression: t_order_${order_id % 2}
